var addEvent = (function()  {
  if (window.addEventListener) {
    return function(el, event, fn, capture) {
      // if(!el) throw new Error('Element is must need')
      if(!el) return;
      el.addEventListener(
        event,
        function(e) {
          fn.call(el, e);
        },
        capture
      );
      return el;
    };
  } else {
    return function(el, type, fn) {
      if(!el) return;
      if(!el) throw new Error('Element is must need')
      el.attachEvent("on" + type, function(e) {
        fn.call(el, e);
      });
      return el;
    };
  }
})();

function css(el,props,value) {
  if(arguments.length === 2) {
    if(typeof props === 'string') {
       return window.getComputedStyle(el, null).getPropertyValue(props)
    } else {
      Object.keys(props).forEach((prop) => {
        el.style[prop] = props[prop]
      })
      return el
    }
  } 

  if(arguments.length === 3 && typeof props === 'string') {
    el.style[props] = value
    return el;
  } 

  return el;
}

function elIndex(el) {
  if (el) {
    var children = el;
    var i = 0;
    while ((children = children.previousSibling) !== null) {
        if (children.nodeType === 1) i++;
    }
    return i;
  } else return -1; 
}
function attr(el,key,value) {
  if(value) {
    el.setAttribute(key,value)
    return el;
  }
  return el.getAttribute(key)
}

function removeAttr(el,key) {
  if(key) {
    el.removeAttribute(key)
    return el;
  }
}

function text(el,value) {
  if(value) {
    el.innerText = value
    return el;
  }
  return el
}

function hasClass(el, className) {
  if(!el) return;
  if (!el.classList) {
      return el.className.match(new RegExp(`(\\s|^)(${className})(\\s|$)`), '$3')
  }
  return el.classList.contains(className)
}

function addClass(el, className) {
  if(!el) return;
  if(el.classList) {
    el.classList.add(className)
  } else {
    let cls = el.className
    if(cls.indexOf(className)>=0) return;
    cls.className += (' ' + className)
  }
  return el
}
 function removeClass(el, className) {
  if(!el) return;
  if(el.classList) {
    el.classList.remove(className)
  } else {
    let cls = el.className
    if(cls.indexOf(className)>=0) {
      cls.replace(new RegExp('(^|\\s+)'+className+'(\\s|$)','g'),'')
    }
  }
  //return el;
}

function debounce (fn,delay) {
  var timer = null
  return function() {
    var _this = this;
    var _args = arguments;
    clearTimeout(timer)
    timer = setTimeout(function() {
      fn.apply(_this,_args)
      timer = null;
    },delay)
  }
}

var linkNav = document.querySelector(".header .link-nav")
var linkMenu = document.querySelector('.menu-wrap .link-nav')
var linkCategory =document.querySelector('.cageogry-link')
var nav = document.querySelector('.nav')
var menu = document.querySelector('.menu-dialog')
var mask = document.querySelector('.mask')
var category = document.querySelector('.category-nav')

var winWidth = window.innerWidth;
addEvent(linkNav,'click',function(e) {
  if(hasClass(nav,'show')) {
    removeClass(mask,'show')
    removeClass(nav,'show')
  } else {
    addClass(mask,'show')
    addClass(nav,'show')
  }
 
},false)
addEvent(linkMenu,'click',function(e) {
  addClass(mask,'show')
  addClass(menu,'show')
},false)
addEvent(linkCategory,'click',function(e) {
  if(hasClass(category,'show')) {
    removeClass(mask,'show')
    removeClass(category,'show')
  } else {
    addClass(mask,'show')
    addClass(category,'show')
  }

})
addEvent(mask,'click',function(e) {
  removeClass(mask,'show')
  removeClass(nav,'show')
  removeClass(menu,'show')
  removeClass(category,'show')
},false)

