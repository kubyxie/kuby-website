var addEvent = (function() {
  if (window.addEventListener) {
    return function(el, event, fn, capture) {
      // if(!el) throw new Error('Element is must need')
      if (!el) return;
      el.addEventListener(
        event,
        function(e) {
          fn.call(el, e);
        },
        capture
      );
      return el;
    };
  } else {
    return function(el, type, fn) {
      if (!el) return;
      if (!el) throw new Error("Element is must need");
      el.attachEvent("on" + type, function(e) {
        fn.call(el, e);
      });
      return el;
    };
  }
})();

function addEvents(els,event,fn,capture) {
  if(els.length) {
    [].forEach.call(els,function(el) {
      addEvent(el,event,fn,capture)
    })
  }
}

function css(el, props, value) {
  if (arguments.length === 2) {
    if (typeof props === "string") {
      return window.getComputedStyle(el, null).getPropertyValue(props);
    } else {
      Object.keys(props).forEach(function(prop) {
        el.style[prop] = props[prop];
      });
      return el;
    }
  }

  if (arguments.length === 3 && typeof props === "string") {
    el.style[props] = value;
    return el;
  }

  return el;
}

function eq(el,index) {
  var children = el.children
  var currents = [].forEach.filter(children,function(item,i) {
    if(i === index) return item
  })
  if(currents&&currents.length) return currents[0]
  return null;
}

function indexOf(el) {
  if (el) {
    var children = el;
    var i = 0;
    while ((children = children.previousSibling) !== null) {
      if (children.nodeType === 1) i++;
    }
    return i;
  } else return -1;
}
function attr(el, key, value) {
  if (value) {
    el.setAttribute(key, value);
    return el;
  }
  return el.getAttribute(key);
}

function removeAttr(el, key) {
  if (key) {
    el.removeAttribute(key);
    return el;
  }
}

function text(el, value) {
  if (value) {
    el.innerText = value;
    return el;
  }
  return el;
}

function hasClass(el, className) {
  if (!el) return;
  if (!el.classList) {
    return el.className.match(new RegExp("(\\s|^)("+ className+")(\\s|$)"), "$3");
  }
  return el.classList.contains(className);
}

function addClass(el, className) {
  if (!el) return;
  if (el.classList) {
    el.classList.add(className);
  } else {
    var cls = el.className;
    if (cls.indexOf(className) >= 0) return;
    cls.className += " " + className;
  }
  return el;
}
function removeClass(el, className) {
  if (!el) return;
  if (el.classList) {
    el.classList.remove(className);
  } else {
    var cls = el.className;
    if (cls.indexOf(className) >= 0) {
      cls.replace(new RegExp("(^|\\s+)" + className + "(\\s|$)", "g"), "");
    }
  }
  //return el;
}
function toggleClass(el,className) {
  if (!el) return;
  return hasClass(el,className)?removeClass(el,className):addClass(el,className)
}
function siblings(el) {
  var r = [];
  var n = el.parentNode.firstChild;
  for (; n; n = n.nextSibling) {
    if (n.nodeType === 1 && n !== elem) {
      r.push(n);
    }
  }
  return r;
}

function debounce(fn, delay) {
  var timer = null;
  return function() {
    var _this = this;
    var _args = arguments;
    clearTimeout(timer);
    timer = setTimeout(function() {
      fn.apply(_this, _args);
      timer = null;
    }, delay);
  };
}

function scrollToTop() {
  var scrollTop = document.documentElement.scrollTop || document.body.scrollTop;
  if (scrollTop > 0) {
    window.requestAnimationFrame(scrollToTop);
    window.scrollTo(0, scrollTop - scrollTop / 8);
  }
}

// Tab 插件
function Tab(barsWrap, panels, callback) {
  this.barsWrap = barsWrap;
  this.panels = panels;
  this.selectClass = 'active'
  this.callback = callback || function(){}
  this.bind();
  this.select(1)
}
Tab.prototype.bind = function() {
  var that = this;
  addEvent(this.barsWrap, "click", function(e) {
    e.preventDefault();
    var target = e.target, parent = null;
    while (parent !== that.barsWrap) {
      if(!target) return;
      parent = target.parentNode;
      if (parent === that.barsWrap) {
        that.select(target)
      }
      target = parent;
    }
  });
};
Tab.prototype.select = function(target) {
  var  that = this;
  var index = -1;
  [].forEach.call(this.barsWrap.children,function(item) {
    if(hasClass(item,that.selectClass)) {
      removeClass(item, that.selectClass);
      return;
    }
  });
  [].forEach.call(this.panels,function(item) {
    if(hasClass(item,that.selectClass)) {
      removeClass(item, that.selectClass);
      return;
    }
  });
  if(typeof target === 'number') {
    index = target-1
    target = this.barsWrap.children[target-1]
  } else {
    index = indexOf(target);
  }
  addClass(target, that.selectClass);
  addClass(this.panels[index], that.selectClass);
  this.callback&&this.callback(this.panels[index],index)
}

// 展开收起插件
function Collapse(el,minHeight,isExpand) {
  this.el = el;
  this.expandHeight = 0;
  this.isExpand = !(isExpand === false);
  this.minHeight = minHeight || 0;
  this.paddingTop = 0;
  this.paddingBottom = 0;
  this.overflow = 'hidden';
  if(!this.el) return;
  this.init()
}

Collapse.prototype.init = function() {
  this.expandHeight =this.el.style.height || this.el.scrollHeight
  this.paddingBottom = this.el.style.paddingBottom
  this.paddingTop = this.el.style.paddingTop
  this.overflow = this.el.style.overflow ;
  addClass(this.el,'collapse-animation')
  css(this.el,{'height':this.expandHeight+'px'})
  if(!this.isExpand) {
    this.collapse()
  }
}
Collapse.prototype.expand = function () {
  css(this.el,{'height':this.expandHeight+'px','overflow':'hidden'})
      //setTimeout(function() {
      this.el.style.paddingBottom = this.paddingBottom
      this.el.style.paddingTop = this.paddingTop
     // }.bind(this),100)
}
Collapse.prototype.collapse = function () {
  css(this.el,{'height':this.minHeight+'px','overflow':'hidden'})
    if(this.minHeight === 0) {
      //setTimeout(function() {
        this.el.style.paddingBottom = 0
        this.el.style.paddingTop = 0
      //}.bind(this),100)
    }
}
Collapse.prototype.toggle = function(fn) {
  if(this.isExpand) {
    this.collapse()
  } else {
    this.expand()
    
  }
  fn&&fn(this.isExpand)
  this.isExpand = !this.isExpand
}
Collapse.prototype.destroy = function(f) {
  attr(this.el,'style')
  removeClass(this.el,'collapse-animation')
  this.el = null;
  this.isExpand = false
}

// 套餐切换插件
function Swiper(container) {
  this.swiperStage = container||document.querySelector('.swiper-stage')
 
  this.pakeWrap = this.swiperStage.querySelector('.pakeage-wrap')
  this.pakeageContainer = this.swiperStage.querySelector('.pakeage-container')
  this.pakeageList = this.swiperStage.querySelectorAll('.pakeage-wrap .pakeage-item')
  this.pakeAdd = this.swiperStage.querySelectorAll('.pakeage-wrap .pakeage-add')

  this.orignItemWidth = 0;
  this.itemWidth = 0;
  this.addWidth = 0;
  this.length = this.pakeageList.length || 0;
  this.wrapWidth = this.pakeWrap.clientWidth || 0;
  this.index = 0;
  this.resizeWidth();
  this.bind()
  //console.log(this.pakeWrap.scrollWidth,this.pakeWrap.clientWidth,this.pakeWrap.offsetWidth )
}
Swiper.prototype.bind = function () {
  var that = this;

  var debountFun = debounce(that.resizeWidth.bind(that), 500)
  addEvent(window, 'resize', debountFun)

  addEvent(this.swiperStage.querySelector('.pakeage-opera-left'), 'click', function () {
    if (that.containerWidth <= that.wrapWidth) return;
    that.slide(--that.index)
  })
  addEvent(this.swiperStage.querySelector('.pakeage-opera-right'), 'click', function () {
    if (that.containerWidth <= that.wrapWidth) return;
    that.slide(++that.index)
  })
}
Swiper.prototype.resizeWidth = function () {
  if (!this.length) return;
  this.itemWidth = this.pakeageList[0].scrollWidth;

  if (this.itemWidth === this.orignItemWidth) return;
  if (this.length > 1) {
    this.addWidth = this.pakeAdd[0].scrollWidth || 0;
  }

  this.containerWidth = containerWidth = (this.itemWidth * this.length) + (this.addWidth * (this.length - 1));
  this.orignItemWidth = this.itemWidth;
  this.wrapWidth = this.pakeWrap.clientWidth || 0;
  css(this.pakeageContainer, 'width', this.containerWidth + 'px')
}
Swiper.prototype.slide = function (i) {
  if (i < 0) i = 0;
  if (i > this.length - 1) i = this.length - 1;
  if (i < 0 || i > this.length - 1) return;
  this.index = i;
  this.translate = i * (this.orignItemWidth + this.addWidth / 2);
  css(this.pakeageContainer, 'transform', 'translateX(' + (-this.translate) + 'px)')

}

function Slider (options) {
  options = options || {}
  this.sliderStage = options.stage||document.querySelector('.slider-stage')
  this.sliderWrap = options.wrap||this.sliderStage.querySelector('.slider-wrap')
  this.sliderContainer = options.container||this.sliderStage.querySelector('.slider-container')

  this.sliderLeft = this.sliderStage.querySelector('.slider-left')
  this.sliderRight = this.sliderStage.querySelector('.slider-right')

  this.sliderItems = this.sliderContainer.querySelectorAll('.slider-item');

  // 判断是否为移动端
  this.isTouchPad = (/hp-tablet/gi).test(navigator.appVersion);
  this.hasTouch = 'ontouchstart' in window && !this.isTouchPad;
 // 绑定对应的方法
  this._start = this.hasTouch ? "touchstart" : "mousedown";
  this._move = this.hasTouch ? "touchmove" : "mousemove";
  this._end = this.hasTouch ? "touchend" : "mouseup";

  this.isDown = false;
  this.startX = 0;
  this.mousePos = { x1:0,y1:0,x2:0,y2:0}

  this.length = this.sliderItems.length || 0
  this.itemWidth = 0;
  this.translate = 0;
  this.index  = 0;

  this.direction = 0; //方向：0是水平，1是垂直

  
  this.createBrider(this.length,this.index)
  this.resizeWidth();
  this.bind();
  this.auto()
}

Slider.prototype.bind = function () {
  var that = this;
  var debountFun = debounce(that.resizeWidth.bind(that), 500)
  addEvent(window, 'resize', debountFun)

  addEvent( this.sliderLeft, 'click', function (e) {
    that.slide(--that.index)
  })
  addEvent( this.sliderRight, 'click', function (e) {
    that.slide(++that.index)
  })

  addEvent( this.sliderContainer, this._start, function (e) {
    that.start.call(that,e)
  },true)
  addEvent( this.sliderContainer, this._move, function (e) {
    that.move.call(that,e)
  },true)
  addEvent( this.sliderContainer, this._end, function (e) {
    that.end.call(that,e)
  },true)

  addEvent(this.briderWrap,'click', function (e) {
    console.log(e.target.tagName)
    if(e.target.tagName.toLowerCase() === 'i') {
      var index = indexOf(e.target);
      console.log(index)
      that.slide(index)
    }
  },false)
}

Slider.prototype.auto = function() {
  if(this.timer) return;
  this.timer = setInterval(function () {
    this.slide(++this.index)
  }.bind(this),5000)
}

Slider.prototype.resizeWidth = function () {
  var that = this;
  //console.log('resize init',this.sliderItems.length)
  if (!this.length) return;
  //console.log('resize start')
  this.itemWidth = this.sliderWrap.clientWidth;
  this.containerWidth = this.itemWidth * this.sliderItems.length;
  [].forEach.call(this.sliderItems,function(item) {  
    css(item, 'width', that.itemWidth + 'px')
  });
  //console.log('resizeWidth',this.itemWidth,this.containerWidth)
  css(this.sliderContainer, 'width', this.containerWidth + 'px')

  that.slide(0)
}
Slider.prototype.offsetX= function(element) {
  var estyle = getComputedStyle(element, null) || element.currentStyle;
  var tf = estyle.WebkitTransform ||element.currentStyle.transform;
  return new WebKitCSSMatrix(tf).e;
};
Slider.prototype.start = function(evt) {
  evt.preventDefault();

  this.isDown = true;
  
  this.startX = this.offsetX(this.sliderContainer);
  var point = this.hasTouch ? evt.touches[0] : evt;

  this.mousePos.x1 = point.pageX
  this.mousePos.y1 = point.pageY;
  this.mousePos.start = +new Date()

  clearInterval(this.timer)
  this.timer = null;
  css(this.sliderContainer,{
    "-webkit-transition": "none",
    transition: "none"
  })
}
Slider.prototype.move = function(evt) {
  evt.preventDefault();
  if(this.isDown) {
    console.log('move')

    //evt.preventDefault();
    var point = this.hasTouch ? evt.touches[0] : evt;
    this.mousePos.x2 = point.pageX;
    this.mousePos.y2 = point.pageY;
    this.lr_distance = this.mousePos.x1 - this.mousePos.x2;
    this.tb_distance = this.mousePos.y1 - this.mousePos.y2;

    if(!(this.direction || Math.abs(this.lr_distance) < Math.abs(this.tb_distance))) {
      evt.stopPropagation();
      evt.preventDefault();
      var offsetDistance =  this.startX - this.lr_distance;
      if(offsetDistance>20) {
        offsetDistance = 20
      }
      if(offsetDistance<-((this.length-1)*this.itemWidth+20)) {
        offsetDistance = -((this.length-1)*this.itemWidth+20)
      }
        css(this.sliderContainer,{
        "-webkit-transform": "translateX(" + (offsetDistance) + "px) translateZ(0)",
        transform: "translateX(" + (offsetDistance) + "px) translateZ(0)"
      })
    } else {
      this.direction = 1;
    }
  }
}
Slider.prototype.end = function(evt) {
  evt.preventDefault();
  this.isDown = false;
  this.mousePos.end = +new Date();
  if(Math.abs(this.lr_distance) / (this.mousePos.end - this.mousePos.start) >= 500 && Math.abs(this.lr_distance) < this.itemWidth / 2) {
    var n = this.lr_distance > 0 ? 1 : -1; //根据左右偏移距离判断是向左-1还是向右+1
    this.index+=n;
  }
  console.log('end')

  this.slide(this.index)
  this.auto()
  
}

Slider.prototype.createBrider = function (len,index) {
  var briderWrap = document.createElement('div')
  var frame = document.createDocumentFragment()
  for(var i=0;i<len;i++) {
    var brider = document.createElement('i')
    if(i === index) addClass(brider,'active')
    frame.appendChild(brider)
  }
  briderWrap.className = 'slider-brider'
  briderWrap.appendChild(frame)
  this.briderWrap = briderWrap;
  this.sliderWrap.appendChild(this.briderWrap)
}

Slider.prototype.activeBrider = function(index) {
  var children = this.briderWrap.children;
  [].forEach.call(children,function(item,i) {
    if(i === index) 
      addClass(item,'active')
    else
      removeClass(item,'active')
  })
}

Slider.prototype.slide = function (i) {
  // if (i < 0) i = 0;
  // if (i >= this.length - 1) i = this.length - 1;
  // if (i < 0 || i > this.length - 1) return;
  this.index = (this.length + ( i % this.length )) % this.length;
  this.translate = this.index * this.itemWidth;
  css(this.sliderContainer,{
    "-webkit-transform": "translateX(" + (-this.translate) + "px) translateZ(0)",
    'transform':'translateX(' + (-this.translate) + 'px) translateZ(0)',
    "-webkit-transition": "-webkit-transform .5s ease-in",
                transition: "transform .5s ease-in"
  })

  this.activeBrider(this.index)
  //css(this.sliderContainer, )
}

// 初始化bind事件
var linkNav = document.querySelector(".header .link-nav");
var linkMenu = document.querySelector(".menu-wrap .link-nav");
var linkCategory = document.querySelector(".cageogry-link");

var nav = document.querySelector(".nav");
var header = document.querySelector(".header")
var main = document.querySelector(".main")
var footer = document.querySelector(".footer")
var menu = document.querySelector(".menu-dialog");
var mask = document.querySelector(".mask");
var categoryNav = document.querySelector(".category-nav");
var fixedBar = document.querySelector('.fixed-sider-title')
var goTop = document.querySelector('.go-top')

var doyooLink = document.querySelectorAll('.doyoo-link')
var aboutUs = document.querySelector('.nav-contact-us')
var qrcode = document.querySelector('.qrcode-dialog')
// var doyooNav = document.querySelector('.doyoo-nav')

var winWidth = window.innerWidth;

// 计算最小高度，防止尾部塌陷
setTimeout(function() {
  var winHeight = window.innerHeight,headHeight = header.clientHeight,footerHeight = footer.clientHeight ;
  css(main,'min-height',(winHeight-headHeight-footerHeight)+'px')
},300)

addEvent(
  linkNav,
  "click",
  function(e) {
    if (hasClass(nav, "show")) {
      removeClass(mask, "show");
      removeClass(nav, "show");
    } else {
      addClass(mask, "show");
      addClass(nav, "show");
    }
    removeClass(qrcode, "show");
  },
  false
);
addEvent(
  linkMenu,
  "click",
  function(e) {
    addClass(mask, "show");
    addClass(menu, "show");
  },
  false
);
addEvent(linkCategory, "click", function(e) {
  if (hasClass(categoryNav, "show")) {
    removeClass(mask, "show");
    removeClass(categoryNav, "show");
  } else {
    addClass(mask, "show");
    addClass(categoryNav, "show");
  }
});

addEvent(
  aboutUs,
  "click",
  function(e) {
    addClass(mask, "show");
    addClass(qrcode, "show");
    removeClass(nav, "show");
  },
  false
);

addEvent(
  mask,
  "click",
  function(e) {
    removeClass(mask, "show");
    removeClass(nav, "show");
    removeClass(menu, "show");
    removeClass(categoryNav, "show");
    removeClass(qrcode, "show");
  },
  false
);

addEvent(goTop,'click',scrollToTop,false)

addEvents(doyooLink,'click',function(e) {
  doyoo.util.openChat('g=10079918')
},false)


var fixedSiderCollapse = new Collapse(document.querySelector('.fixed-sider-list'))
addEvent(fixedBar,'click',function(e) {
  fixedSiderCollapse.toggle()
  toggleClass(fixedBar,'active')
},false)

var categoryHeight = 49;
var category = document.querySelector(".category")
if(category) {
  var categoryBtn = document.querySelector('.category-toggle')
  if(category.clientHeight <= categoryHeight) {
    addClass(categoryBtn,'hide')
  }
  if(window.innerWidth>750) {
    var categoryCollapse = new Collapse(category,categoryHeight,false)
    addEvent(categoryBtn,'click',function(e) {
      categoryCollapse.toggle()
      toggleClass(categoryBtn,'active')
    },false)
  }

}

var fixedSider = document.querySelector('.fixed-sider')
window.onscroll = function(e) {
  var doc = document.documentElement||document.body
  var scrollTop = doc.scrollTop;
  if(scrollTop === 0) {
    css(fixedSider,{'top':'96px'})
  } else if(scrollTop>80){
    css(fixedSider,{'top':'10px'})
  }
 }